:PROPERTIES:
:ID:       b34392e8-9180-4826-aafc-e8d2ffb6e82c
:END:
#+title: Arnoldi Iterations
#+filetags: :LinearAlgebra:
#+startup: latexpreview

A more specific case for Hermitian matrices can be found in [[id:2ac50dc6-be86-4344-a20f-f9aef7e0ce73][Lanczos Iterations.]]

This method extracts approximations from a [[id:dc6424ca-a277-43f0-b37c-753435090ea2][Krylov subspace]], by
projecting orthogonally onto $\mathcal{K}_r(A, q)$, ie constructing an
orthogonal basis of this space starting with $q_1$, with unit norm.

* Principle
  At step $i$
  + Compute $q_{i} \gets Aq_{i-1}$
  + Orthogonalize $q_{i}$ wrt to $\mathcal{K}_{i-1}(A, q_1)$: for $1\leq k \leq i-1$
    + $h_{k, i-1} = \langle q_k, q_i\rangle$
    + $q_i \gets q_i - \langle q_k, q_i\rangle q_k$
  + Normalize the projected vector
    + $q_i \gets q_i / \|q_i\|$
    + $h_{i, i-1} = \|q_i\|$

We finally have $H_n$ as an [[id:c00cad59-76c2-4c70-bb79-1125d2dd51ba][Hessenberg matrix:]]
\begin{equation}
H_n = \begin{bmatrix}
h_{1, 1} & h_{1, 2} & \dots & \dots & h_{1, n} \\
h_{2, 1} & h_{2, 2} & \dots & \dots &h_{2, n} \\
0 & h_{3, 2} & h_{3, 3} & \dots & h_{3, n} \\
\vdots & \ddots & \ddots & \ddots & \vdots \\
0 & 0 & 0 &h_{n, n-1} & h_{n, n}
\end{bmatrix}
\end{equation}
and $A = Q_nH_nQ_n^T$

From an iterative point of view, we have the following relation:
\begin{equation}
AQ_j =Q_{j+1}\tilde{H}_j
\end{equation}
with
\begin{equation}
\tilde{H}_n = \begin{bmatrix} H_n \\ [0, \dots, 0, h_{n+1 ,n}] \end{bmatrix} \in \mathbb{R}^{n+1 \times n}
\end{equation} upper Hessenberg.

The residual at step $n$ writes
\begin{align}
\|r_n \| &= \|b - Ax_n\| \\
&= \|b - A(x_0 +Q_ny_n)\| \\
&= \|r_0 -AQ_ny_n)\| \\
\end{align}

* Implementation (from wikipedia)

#+begin_src python
import numpy as np

def arnoldi_iteration(A, b, n: int):
    """Computes a basis of the (n + 1)-Krylov subspace of A: the space
    spanned by {b, Ab, ..., A^n b}.

    Arguments
      A: m Ã— m array
      b: initial vector (length m)
      n: dimension of Krylov subspace, must be >= 1
    
    Returns
      Q: m x (n + 1) array, the columns are an orthonormal basis of the
        Krylov subspace.
      h: (n + 1) x n array, A on basis Q. It is upper Hessenberg.  
    """
    eps = 1e-12
    h = np.zeros((n+1,n))
    Q = np.zeros((A.shape[0],n+1))
     # Normalize the input vector
    Q[:,0] = b / np.linalg.norm(b,2)   # Use it as the first Krylov vector
    for k in range(1,n+1):
        v = np.dot(A, Q[:,k-1])  # Generate a new candidate vector
        for j in range(k):  # Subtract the projections on previous vectors
            h[j,k-1] = np.dot(Q[:,j].T, v)
            v = v - h[j,k-1] * Q[:,j]
        h[k,k-1] = np.linalg.norm(v,2)
        if h[k,k-1] > eps:  # Add the produced vector to the list, unless
            Q[:,k] = v/h[k,k-1]
        else:  # If that happens, stop iterating.
            return Q, h
    return Q, h
#+end_src
