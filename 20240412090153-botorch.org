:PROPERTIES:
:ID:       a792ab31-2d66-43de-a7a4-aa407f023bea
:ROAM_ALIASES: BoTorch
:END:
#+title: BOtorch
#+filetags: :ProgrammingLanguage:ML:Bayesian:

Based on [[id:40086648-2e0c-4bad-aaa3-ad0e146f8ee6][PyTorch]] especially for [[id:4f615672-6a6d-4511-a38c-f5c7b88eeb60][Bayesian Optimization]].


* Reminders
+ AppendFeatures pour prÃ©parer marginalization


#+BEGIN_SRC python
import torch
import botorch
from botorch.models import SingleTaskGP
from botorch.models.transforms import Standardize
from botorch.models.transforms.input import AppendFeatures


test_function = Branin(negate=True)
dim = test_function.dim


def evaluate_function(X: Tensor) -> Tensor:
    return test_function(unnormalize(X, test_function.bounds)).view(*X.shape[:-1], 1)


bounds = torch.stack([torch.zeros(dim), torch.ones(dim)]).to(**tkwargs)
train_X = draw_sobol_samples(bounds=bounds, n=8, q=1).squeeze(-2).to(**tkwargs)
train_Y = evaluate_function(train_X)


w_set = draw_sobol_samples(n=N_W, q=1, bounds=bounds[:, -1:]).squeeze(-2).to(**tkwargs)
model = SingleTaskGP(
    train_X,  # in joint space for training
    train_Y,
    input_transform=AppendFeatures(feature_set=w_set),  # To the trained model
    outcome_transform=Standardize(m=1),
)
mll = ExactMarginalLogLikelihood(model.likelihood, model)
fit_gpytorch_mll(mll)
#+END_SRC
